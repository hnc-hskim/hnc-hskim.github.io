<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Msa on My New Hugo Site</title>
    <link>https://hnc-hskim.github.io/workshop/msa/</link>
    <description>Recent content in Msa on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 12 Jul 2022 13:38:31 +0900</lastBuildDate><atom:link href="https://hnc-hskim.github.io/workshop/msa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Architecture</title>
      <link>https://hnc-hskim.github.io/workshop/msa/software-architecture/</link>
      <pubDate>Tue, 12 Jul 2022 15:43:56 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/msa/software-architecture/</guid>
      <description>[참고] https://dev.to/zachgoll/introduction-to-software-architecture-monolithic-vs-layered-vs-microservices-452
[참고] https://github.com/mermaid-js/mermaid
Diagram Editor
&amp;ldquo;Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius—and a lot of courage to move in the opposite direction&amp;rdquo;
[From E.F. Schumacher&amp;rsquo;s book Small is Beautiful]
1. 소프트웨어 아키텍처 소프트웨어 구조 또는 소프트웨어 아키텍처(software architecture)는 소프트웨어의 구성요소들 사이에서 유기적 관계를 표현하고 소프트웨어의 설계와 업그레이드를 통제하는 지침과 원칙이다.
1.1 소프트웨어 아키텍처 설계시 고려사항  성능: 회전하는 &amp;ldquo;로드 중&amp;rdquo; 아이콘이 사라지기 전에 얼마나 기다려야 합니까?</description>
    </item>
    
    <item>
      <title>Concept</title>
      <link>https://hnc-hskim.github.io/workshop/msa/concept/</link>
      <pubDate>Tue, 12 Jul 2022 13:38:23 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/msa/concept/</guid>
      <description>아래에 사용된 예제는 NodeJS, ExpressJS, MongoDB를 이용하여 구성되었습니다.
Diagram Editor
mermaid flowchart syntax
1. 모놀리식 아키텍처 VS 마이크로서비스 아키텍처 Monolithic Architecture 전통적인 모놀로식 아키텍처가 비효율적으로 보일 수 있지만 실제로 개발중인 애플리케이션이 충분히 복잡하지 않다면 마이크로서비스 아키텍처의 이점을 확인하기는 쉽지 않다. 비교적 간단한 아키텍처의 경우 충분히 활용 가능한 솔루션이라고 할 수 있다.
따라서 모놀로딕 아키텍처로 시작하여 마이크로 서비스 아키텍처로 리팩토링하는것이 효율적인 개발 방법일수도 있다.
장점  손쉬운 배포 : 단일 실행파일 또는 디렉토리로 작성되어 배포가 쉽다.</description>
    </item>
    
  </channel>
</rss>
