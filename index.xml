<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://hnc-hskim.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 13 Jul 2022 09:00:36 +0900</lastBuildDate><atom:link href="https://hnc-hskim.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Definition</title>
      <link>https://hnc-hskim.github.io/workshop/msa/definition/</link>
      <pubDate>Thu, 21 Jul 2022 15:01:06 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/msa/definition/</guid>
      <description>출처 : 위키디피아
정의 마이크로서비스(microservice)는 애플리케이션을 느슨하게 결합된 서비스의 모임으로 구조화하는 서비스 지향 아키텍처(SOA) 스타일의 일종인 소프트웨어 개발 기법이다. 마이크로서비스 아키텍처에서 서비스들은 섬세(fine-grained)하고 프로토콜은 가벼운 편이다. 애플리케이션을 더 조그마한 여러 서비스로 분해할 때의 장점은 모듈성을 개선하고 애플리케이션의 이해, 개발, 테스트를 더 쉽게 해주고 애플리케이션 침식에 더 탄력적으로 만들어 준다. 규모가 작은 자율적인 팀들이 팀별 서비스를 독립적으로 개발, 전개, 규모 확장을 할 수 있게 함으로써 병렬로 개발할 수 있게 한다. 또, 지속적인 리팩터링을 통해 개개의 서비스 아키텍처가 하나로 병합될 수 있게 허용한다.</description>
    </item>
    
    <item>
      <title>Concept</title>
      <link>https://hnc-hskim.github.io/workshop/msa/concept/</link>
      <pubDate>Tue, 12 Jul 2022 13:38:23 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/msa/concept/</guid>
      <description>아래에 사용된 예제는 NodeJS, ExpressJS, MongoDB를 이용하여 구성되었습니다.
Referenes https://dev.to/zachgoll/introduction-to-software-architecture-monolithic-vs-layered-vs-microservices-452 https://www.atlassian.com/ko/microservices/microservices-architecture/microservices-vs-monolith https://github.com/zachgoll/layered-architecture-example-app Diagram Editor mermaid flowchart syntax 모놀리식 아키텍처는 소프트웨어 프로그램의 전통적인 모델로, 자체 포함 방식이며 다른 애플리케이션과 독립적인 통합된 유닛으로 만들어집니다. “모놀리스&amp;quot;라는 단어는 거대하고 빙하 같은 것을 의미하는 경우가 많은데, 소프트웨어 설계의 모놀리식 아키텍처도 크게 다르지 않습니다. 모놀리식 아키텍처는 모든 비즈니스 관련 사항을 함께 결합하는 하나의 코드 베이스를 갖춘 대규모의 단일 컴퓨팅 네트워크입니다.
1. 모놀리식 아키텍처 VS 마이크로서비스 아키텍처 Monolithic Architecture 전통적인 모놀로식 아키텍처가 비효율적으로 보일 수 있지만 간단한 아키텍처의 경우 모놀리식 아키텍처도 충분히 활용 가능한 솔루션이라고 할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Software Architecture Pattern</title>
      <link>https://hnc-hskim.github.io/workshop/msa/software-architecture-pattern/</link>
      <pubDate>Mon, 18 Jul 2022 16:48:39 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/msa/software-architecture-pattern/</guid>
      <description>Referenes 10 Common Software Architectural Patterns in a nutshell Architectural patterns 소프트웨어 아키텍처가 프로젝트의 성공에 중요한 13가지 이유 아키텍처는 시스템의 구동 품질 속성을 억제하거나 활성화합니다. 아키텍처에서 내린 결정을 통해 시스템이 발전함에 따라 변경 사항을 추론하고 관리할 수 있습니다. 아키텍처 분석을 통해 시스템 품질을 조기에 예측할 수 있습니다. 문서화된 아키텍처는 이해 관계자 간의 의사 소통을 향상시킵니다. 아키텍처는 가장 초기에 가장 기본적이고 가장 변경하기 어려운 설계 결정의 전달자입니다. 아키텍처는 후속 구현에 대한 일련의 제약 조건을 정의합니다.</description>
    </item>
    
    <item>
      <title>Software Architecture</title>
      <link>https://hnc-hskim.github.io/workshop/msa/software-architecture/</link>
      <pubDate>Tue, 12 Jul 2022 15:43:56 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/msa/software-architecture/</guid>
      <description>References [참고1] https://dev.to/zachgoll/introduction-to-software-architecture-monolithic-vs-layered-vs-microservices-452 [참고2] https://github.com/mermaid-js/mermaid Diagram Editor &amp;ldquo;Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius—and a lot of courage to move in the opposite direction&amp;rdquo;
[From E.F. Schumacher&amp;rsquo;s book Small is Beautiful]
1. 소프트웨어 아키텍처 소프트웨어 구조 또는 소프트웨어 아키텍처(software architecture)는 소프트웨어의 구성요소들 사이에서 유기적 관계를 표현하고 소프트웨어의 설계와 업그레이드를 통제하는 지침과 원칙이다.
1.1 소프트웨어 아키텍처 설계시 고려사항 성능: 회전하는 &amp;ldquo;로드 중&amp;rdquo; 아이콘이 사라지기 전에 얼마나 기다려야 합니까?</description>
    </item>
    
    <item>
      <title>Event Storming</title>
      <link>https://hnc-hskim.github.io/workshop/eventstorming/miro/</link>
      <pubDate>Wed, 03 Aug 2022 17:24:14 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/eventstorming/miro/</guid>
      <description>References [miro] https://miro.com/app/dashboard/ [test board] https://miro.com/app/board/uXjVOh72El0=/?share_link_id=330360109631 Event Storming hancomcloud test board</description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>https://hnc-hskim.github.io/workshop/msa/glossary/</link>
      <pubDate>Wed, 03 Aug 2022 08:49:31 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/msa/glossary/</guid>
      <description>용어 사전 A
AWS AWS(Amazon Web Services)는 아마존닷컴의 클라우드 컴퓨팅 사업부이며 현재 클라우드 컴퓨팅 분야에서 압도적인 세계 1위를 차지하고 있으며 2022년부로 16주년을 맞는 다국적 기업이자 역사상 가장 큰 IT 및 클라우드 기업 중 하나이다. 아마존 웹 서비스는 다른 웹 사이트나 클라이언트측 응용 프로그램에 대해 온라인 서비스를 제공하고 있다. 이러한 서비스의 상당수는 최종 사용자에 직접 공개되는 것이 아니고, 다른 개발자가 사용 가능한 기능을 제공하는 플랫폼을 제공하는 PaaS이다.
API Gateway API 게이트웨이 는 실제 백엔드 서비스 또는 데이터와 접속하고 API 호출에 대한 정책, 인증 및 일반 액세스 제어를 적용하여 중요한 데이터를 보호하는 트래픽 관리자입니다.</description>
    </item>
    
    <item>
      <title>Code Server</title>
      <link>https://hnc-hskim.github.io/workshop/ide/code-server/</link>
      <pubDate>Thu, 28 Jul 2022 10:41:30 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/workshop/ide/code-server/</guid>
      <description>References [coder] https://coder.com/ [code server] https://github.com/coder/code-server Coder is an open source platform for creating and managing developer workspaces on your preferred clouds and servers. By building on top of common development interfaces (SSH) and infrastructure tools (Terraform), Coder aims to make the process of provisioning and accessing remote workspaces approachable for organizations of various sizes and stages of cloud-native maturity.
WEB-IDE 사용법 1. 차트 설치 Rancher 접속(Apps -&amp;gt; Charts 선택) Chart Repository(code-server 선택) code-server 차트 선택 2.</description>
    </item>
    
    <item>
      <title>Wpf Blazor 1</title>
      <link>https://hnc-hskim.github.io/blazor/lab/wpf-blazor-1/</link>
      <pubDate>Sat, 23 Jul 2022 14:01:09 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/blazor/lab/wpf-blazor-1/</guid>
      <description>References WPF Blazor 앱 빌드 WPF Blazor 앱 프로젝트 만들기 프로젝트에 Razor 구성 요소 추가 Windows에서 앱 실행 Blazor Hybrid가 GA(일반 공급)에 도달했으며 프로덕션 워크로드에 대해 완전히 지원됩니다. Visual Studio 및 Mac용 Visual Studio는 Blazor Hybrid 앱 작업을 위해 시험판 버전으로 제공되며 최종 릴리스 전에 수정될 수 있습니다. 최상의 도구 환경을 위해 Visual Studio 2022 미리 보기를 업데이트된 상태로 유지하는 것이 좋습니다.
요구사항 visual studio 2022 visual studio workload(.net desktop development) WPF Blazor 프로젝트 만들기 visual studio 2022 preview 시작 새 프로젝트 만들기 선택 wpf 애플리케이션 선택 이름(WpfBlazor) 입력 및 저장 위치 선택 .</description>
    </item>
    
    <item>
      <title>Helm Repository</title>
      <link>https://hnc-hskim.github.io/cloud/helm/helm-repository/</link>
      <pubDate>Fri, 22 Jul 2022 11:01:46 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/cloud/helm/helm-repository/</guid>
      <description>Github에 helm repository 만들기 1. Github으로 이동 2. New 버튼을 클릭한다. Repository name(helm-charts) Public 체크 Add a README file 체크 3. 생성된 Repository 화면 4. 접근 URL 셋팅 리파지터리 홈 탭 메뉴의 Settings를 선택한다.
좌측 메뉴에 Pages를 선택한다. main 브랜치를 선택후 save 버튼을 클릭한다. publicshed 주소가 나오는데 이 주소가 helm repository 주소가 된다. 5. Local Repository 만들기 생성한 Repository를 로컬에 clone한다. $ git clone https://github.com/&amp;#34;Your github id&amp;#34;/helm-charts.git$ cd helm-charts# stable 디렉토리를 생성한다.</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>https://hnc-hskim.github.io/cloud/rancher/monitoring/</link>
      <pubDate>Tue, 19 Jul 2022 13:59:12 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/cloud/rancher/monitoring/</guid>
      <description>Rancher에 모니터링 도구 설치 및 GPU 모니터링 References [참고1] https://nvidia.github.io/gpu-monitoring-tools/ [참고2] https://passwd.tistory.com/entry/NVIDIAgpu-monitoring-tools-dcgm-exporter-CrashLoopBackOff rancher에서 monitoring 도구 설치 Apps -&amp;gt; Charts 이동후 monitoring 검색 Monitoring 설치 설치를 진행하면 모니터링 앱은 Rancher 의 cattle-monitoring-system namespace 에 배포됨
(설치후 랜처 로그아웃후 다시 로그인)
네비게이션 영역을 보면 Monitoring 메뉴가 추가되어 있음 대쉬보드 확인 grafana 확인 그라파나에 로그인합니다. Grafana 인스턴스의 기본 관리자 사용자 이름과 비밀번호는 입니다 admin/prom-operator. (비밀번호가 있는 사람에 관계없이 Rancher의 클러스터 관리자 권한은 여전히 ​​Grafana 인스턴스에 액세스해야 합니다.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://hnc-hskim.github.io/terraform/introduction/</link>
      <pubDate>Mon, 18 Jul 2022 14:19:28 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/terraform/introduction/</guid>
      <description>테라폼(Terraform)은 하시코프(Hashicorp)에서 오픈소스로 개발중인 클라우드 인프라스트럭처 자동화를 지향하는 코드로서의 인프라스트럭처(Infrastructure as Code), IaC1 도구입니다.
AWS 클라우드 포메이션AWS CloudFormation의 경우 AWS만 지원하는 것과 달리 테라폼의 경우 아마존 웹 서비스, 구글 클라우드 플랫폼(Google Cloud Platform), 마이크로소프트 애저(Microsoft Azure)와 같은 주요 클라우드 서비스를 비롯한 다양한 클라우드 서비스들을 프로바이더 방식으로 제공하고 있습니다. 이를 통해 테라폼만으로 멀티 클라우드의 리소스들을 선언하고 코드로 관리하는 것도 가능합니다.
테라폼은 고(Go) 프로그래밍 언어로 개발하고 있습니다.
테라폼 공식 홈
IaC는 코드로 인프라스트럭처를 관리한다는 개념으로 테라폼에서는 하시코프 설정 언어(HCL, Hashicorp Configuration Language)을 사용해 클라우드 리소스를 선언합니다.</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://hnc-hskim.github.io/references/kubernetes/</link>
      <pubDate>Mon, 18 Jul 2022 13:58:17 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/references/kubernetes/</guid>
      <description>참고 Advanced Scheduling </description>
    </item>
    
    <item>
      <title>Terraform</title>
      <link>https://hnc-hskim.github.io/references/terraform/</link>
      <pubDate>Fri, 15 Jul 2022 13:52:27 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/references/terraform/</guid>
      <description>참고 helm values파일내 환경변수 전달 nginx controller acm 적용 </description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://hnc-hskim.github.io/hugo/comments/</link>
      <pubDate>Fri, 15 Jul 2022 11:57:37 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/hugo/comments/</guid>
      <description>[참고] https://velog.io/@mellonggo/Github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-Hugo
댓글 기능 추가 리파지터리 생성 blog-comments로 리파지터리 생성 layouts/partials/custom-footer.html 파일 생성 및 스크립트 추가 테마별로 지정해야할 위치가 다를수 있다. learn 테마의 경우 post 레이아웃을 찾을수 없어 custom-footer.html에 추가한다.
아래 코드를 복하하여 custom-footer.html에 붙여넣는다. &amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34;repo=&amp;#34;user id/blog-comments&amp;#34;issue-term=&amp;#34;title&amp;#34;theme=&amp;#34;github-light&amp;#34;crossorigin=&amp;#34;anonymous&amp;#34;async&amp;gt;&amp;lt;/script&amp;gt; 첫 로딩시 댓글 기능은 비활성화되어 있고 github 로그인 인증을 통해 해당 리파지터리에서 utterances app 사용을 승인하면 이후 댓글 기능을 사용할 수 있다. 댓글의 경우 생성한 리파지터리의 Issues 생성 기능을 통해 동작한다.</description>
    </item>
    
    <item>
      <title>Scheduling</title>
      <link>https://hnc-hskim.github.io/cloud/operation/scheduling/</link>
      <pubDate>Fri, 15 Jul 2022 08:52:22 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/cloud/operation/scheduling/</guid>
      <description>노드에 파드 할당하기 특정한 노드(들) 집합에서만 동작하도록 파드를 제한할 수 있다. 이를 수행하는 방법에는 여러 가지가 있으며 권장되는 접근 방식은 모두 레이블 셀렉터를 사용하여 선택을 용이하게 한다. 보통은 스케줄러가 자동으로 합리적인 배치(예: 자원이 부족한 노드에 파드를 배치하지 않도록 노드 간에 파드를 분배)를 수행하기에 이러한 제약 조건은 필요하지 않다. 그러나, 예를 들어 SSD가 장착된 머신에 파드가 배포되도록 하거나 또는 많은 통신을 하는 두 개의 서로 다른 서비스의 파드를 동일한 가용성 영역(availability zone)에 배치하는 경우와 같이, 파드가 어느 노드에 배포될지를 제어해야 하는 경우도 있다.</description>
    </item>
    
    <item>
      <title>Style</title>
      <link>https://hnc-hskim.github.io/hugo/style/</link>
      <pubDate>Wed, 13 Jul 2022 09:06:26 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/hugo/style/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Aws Cli</title>
      <link>https://hnc-hskim.github.io/kubernetes/aws-cli/</link>
      <pubDate>Wed, 13 Jul 2022 08:52:53 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/kubernetes/aws-cli/</guid>
      <description>aws 계정 정보 조회 aws sts get-caller-identity --profile &amp;#34;name&amp;#34; kubeconfig 등록 aws eks --profile &amp;#34;profile name&amp;#34; update-kubeconfig --name &amp;#34;cluster name&amp;#34; --region ap-northeast-2 </description>
    </item>
    
    <item>
      <title>Cli</title>
      <link>https://hnc-hskim.github.io/kubernetes/cli/</link>
      <pubDate>Wed, 13 Jul 2022 08:51:28 +0900</pubDate>
      
      <guid>https://hnc-hskim.github.io/kubernetes/cli/</guid>
      <description>조회(All) $ kubectl get all -n code-serverNAME READY STATUS RESTARTS AGEpod/code-server-5fc775748c-nbmsr 0/1 Init:CrashLoopBackOff 5 4m31sNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice/code-server ClusterIP 10.79.240.159 &amp;lt;none&amp;gt; 8080/TCP 13mNAME READY UP-TO-DATE AVAILABLE AGEdeployment.apps/code-server 0/1 1 0 13mNAME DESIRED CURRENT READY AGEreplicaset.apps/code-server-5879f94445 0 0 0 7m13sreplicaset.apps/code-server-5fc775748c 1 1 0 4m31sreplicaset.apps/code-server-67d7c4f6cd 0 0 0 13m 리소스 쿼터 조회 kubectl get resourcequota -n &amp;#34;namespace&amp;#34; 컨텍스트 조회 kubectl config get-contexts 컨텍스트 사용 kubectl config use-context &amp;#34;context name&amp;#34; 클러스터명 조회 kubectl config view --minify -o jsonpath=&amp;#39;{.</description>
    </item>
    
  </channel>
</rss>
